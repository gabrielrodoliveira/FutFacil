// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Court{
  id String @id @default(uuid()) //Se a quadra criada não houver ID, vai colocar o default com ID aleatório.
  name String
  location String
  dateReservation DateTime
  timeReservation String
  priceReservation Decimal @db.Decimal(8,2)
  description String
  coverImage String
  imagesUrl String[]
  highlights String[]
  reservation CourtReservation[]
}

model CourtReservation{
  id String @id @default(uuid()) 
  courtId String
  court Court @relation(fields: [courtId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  dateReservation DateTime
  timeReservation String
  priceReservation Decimal @db.Decimal(8,2)
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservation CourtReservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}